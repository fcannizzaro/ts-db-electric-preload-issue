/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as DRouteImport } from './routes/d'
import { Route as CRouteImport } from './routes/c'
import { Route as BRouteImport } from './routes/b'
import { Route as ARouteImport } from './routes/a'
import { Route as IndexRouteImport } from './routes/index'
import { ServerRoute as ApiShapesTableServerRouteImport } from './routes/api/shapes.$table'

const rootServerRouteImport = createServerRootRoute()

const DRoute = DRouteImport.update({
  id: '/d',
  path: '/d',
  getParentRoute: () => rootRouteImport,
} as any)
const CRoute = CRouteImport.update({
  id: '/c',
  path: '/c',
  getParentRoute: () => rootRouteImport,
} as any)
const BRoute = BRouteImport.update({
  id: '/b',
  path: '/b',
  getParentRoute: () => rootRouteImport,
} as any)
const ARoute = ARouteImport.update({
  id: '/a',
  path: '/a',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiShapesTableServerRoute = ApiShapesTableServerRouteImport.update({
  id: '/api/shapes/$table',
  path: '/api/shapes/$table',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/a': typeof ARoute
  '/b': typeof BRoute
  '/c': typeof CRoute
  '/d': typeof DRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/a': typeof ARoute
  '/b': typeof BRoute
  '/c': typeof CRoute
  '/d': typeof DRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/a': typeof ARoute
  '/b': typeof BRoute
  '/c': typeof CRoute
  '/d': typeof DRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/a' | '/b' | '/c' | '/d'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/a' | '/b' | '/c' | '/d'
  id: '__root__' | '/' | '/a' | '/b' | '/c' | '/d'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ARoute: typeof ARoute
  BRoute: typeof BRoute
  CRoute: typeof CRoute
  DRoute: typeof DRoute
}
export interface FileServerRoutesByFullPath {
  '/api/shapes/$table': typeof ApiShapesTableServerRoute
}
export interface FileServerRoutesByTo {
  '/api/shapes/$table': typeof ApiShapesTableServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/shapes/$table': typeof ApiShapesTableServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/shapes/$table'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/shapes/$table'
  id: '__root__' | '/api/shapes/$table'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiShapesTableServerRoute: typeof ApiShapesTableServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/d': {
      id: '/d'
      path: '/d'
      fullPath: '/d'
      preLoaderRoute: typeof DRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/c': {
      id: '/c'
      path: '/c'
      fullPath: '/c'
      preLoaderRoute: typeof CRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/b': {
      id: '/b'
      path: '/b'
      fullPath: '/b'
      preLoaderRoute: typeof BRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/a': {
      id: '/a'
      path: '/a'
      fullPath: '/a'
      preLoaderRoute: typeof ARouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/shapes/$table': {
      id: '/api/shapes/$table'
      path: '/api/shapes/$table'
      fullPath: '/api/shapes/$table'
      preLoaderRoute: typeof ApiShapesTableServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ARoute: ARoute,
  BRoute: BRoute,
  CRoute: CRoute,
  DRoute: DRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiShapesTableServerRoute: ApiShapesTableServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
